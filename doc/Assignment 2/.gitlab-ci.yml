stages:
    - PreTest
    - Build
    - Deploy
    - DeploymentTest


frontend_test:
    image: node:20.16.0-alpine3.20
    stage: PreTest
    before_script:
        - echo "Running frontend before script"
        - cd frontend
        - npm install
        # - npm test
    script:
        - echo "Running frontend tests"
    after_script:
        - echo "Frontend tests completed"
        - rm -rf node_modules

backend_test:
    image: node:20.16.0-alpine3.20
    stage: PreTest
    before_script:
        - cd backend
        - npm install
        # - npm test
    script:
        - echo "Running backend tests"
    after_script:
        - echo "Backend tests completed"
        - rm -rf node_modules
build_image:
    needs: [frontend_test, backend_test]
    image: docker:24.0.5
    services:
        - docker:24.0.5-dind
    variables:
        DOCKER_TLS_CERTDIR: "/certs"
        
    stage: Build
    before_script:
        - export VERSION=$(date +%Y%m%d%H%M%S)
        - echo $CI_REGISTRY_USER
        - echo $CI_REGISTRY_PASSWORD
        - echo $VERSION
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD

    script:
        - export VERSION=$(date +%Y%m%d%H%M%S)
        - docker-compose build
        - docker tag cscc01_assignment_2-frontend:latest $CI_REGISTRY_USER/cscc01_assignment_2-frontend:$VERSION
        - docker tag cscc01_assignment_2-frontend:latest $CI_REGISTRY_USER/cscc01_assignment_2-frontend:latest
        - docker tag cscc01_assignment_2-backend:latest $CI_REGISTRY_USER/cscc01_assignment_2-backend:$VERSION
        - docker tag cscc01_assignment_2-backend:latest $CI_REGISTRY_USER/cscc01_assignment_2-backend:latest
        - docker push $CI_REGISTRY_USER/cscc01_assignment_2-frontend:$VERSION
        - docker push $CI_REGISTRY_USER/cscc01_assignment_2-frontend:latest
        - docker push $CI_REGISTRY_USER/cscc01_assignment_2-backend:$VERSION
        - docker push $CI_REGISTRY_USER/cscc01_assignment_2-backend:latest


deploy_image:
    image: docker:24.0.5
    services:
        - docker:24.0.5-dind
    stage: Deploy
    before_script:
        - cat $AWS_SSH_KEY > private_key.pem
        - chmod 400 private_key.pem
    script:
        - export IMAGE_TAG=$(cat image_tag.txt)
        - docker ps
        - docker images
        - echo "Docker image deployed successfully"
        - scp -o StrictHostKeyChecking=no -i private_key.pem ./confg_aws ec2-user@ec2-54-167-41-40.compute-1.amazonaws.com:/home/ec2-user 
        - ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@ec2-54-167-41-40.compute-1.amazonaws.com "
            cat /home/ec2-user/confg_aws > docker-compose.yml &&
            docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD &&
            docker-compose down &&
            docker pull $CI_REGISTRY_USER/cscc01_assignment_2-frontend:latest &&
            docker pull $CI_REGISTRY_USER/cscc01_assignment_2-backend:latest &&
            docker-compose up -d
            "
     
    after_script:
        - echo "Docker image deployment completed"

deploy_test:
    stage: DeploymentTest
    image: python:3.9
    services:
        - name: selenium/standalone-chrome:latest
          alias: selenium
    before_script:
        - pip install selenium unittest-xml-reporting
    script:
        - echo "Running Selenium tests..."
        - python -m xmlrunner DeploymentTest > automated-test-results
    artifacts:
        when: always
        paths:
        - automated-test-results
        expire_in: 1 week
      